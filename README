# 1️⃣ 과제 요구 사항: 내 프로젝트의 ERD 작성하기


1. 내 프로젝트의 ERD 작성하기
    - ERD란? Entity Relationship Diagram으로 데이터베이스에서 각 데이터들의 관계를 그림으로 표현한 것입니다.
    - 데이터베이스 엔티티들의 관계를 한눈에 확인할 수 있으며, 요구사항에 맞게 개발을 진행할 수 있도록 도움을 받을 수 있습니다.
    - **ERD를 구현할 수 있는 사이트: [DrawSQL](https://drawsql.app/)**
    
    [[DB] 📚 데이터 모델링 개념 및 📈 ERD 다이어그램 그리는법 (1:N 관계)](https://inpa.tistory.com/entry/DB-%F0%9F%93%9A-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8%EB%A7%81-1N-%EA%B4%80%EA%B3%84-%F0%9F%93%88-ERD-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8)
    


2️⃣ 과제 요구 사항: `**mongoose**`를 `**sequelize**`로 변경하기!

**MongoDB**로 연결되어있던 프로젝트를 **MySQL**로 변경합니다!







============================================================================================
############################################################################################      
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 로직 정리 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>           
############################################################################################






//============================================================================================
##################################### 기본 세팅 로직 정리 ###################################
============================================================================================//

[[1]]. --------------- 기본 폴더 윈도우에 생성 후 VScode 연결
작업폴더 만들기
VScode로 폴더 열기

[[2]]. --------------- git init & 깃허브 레포에 푸쉬
git init
GigHub commit
GigHub push

[[3]]. --------------- 기본 폴더 및 파일 생성
app.js 파일 생성 
.env 파일 생성
routes 폴더 생성
model 폴더 생성 
controller 폴더 생성 
middleware 폴더 생성

[[4]]. --------------- json 파일에 npm 다운로드
npm init -y 
npm i
npm i express 익스프레스 npm 인스톨
npm i dotenv -- env 실행기
npm i nodemon -- 자동실행기?
npm i cookie-parser -- 쿠키 생성기
npm i jsonwebtoken -- jwt 토큰 생성기
npm i sequelize -- 시퀄라이즈 
npm i bcrypt -- 암호화
npm i express-async-errors -- 비동기 에러 검사
npm i express-validator -- 유효성검사
npm i morgan -- ??
npm i mysql2 -- mysql2(신식) !== mysql  










============================================================================================//
################################ 기본 파일 코드 구현 로직 정리 #################################
//============================================================================================
[[5]]. app.js 파일 & .env 파일 

"./app.js" 파일-----------------------------------------------------------------------------

import express from 'express';
import { sequelize } from './db/database.js';
import cookieParser from 'cookie-parser';

// env 
import dotenv from 'dotenv';
dotenv.config();

const app = express();

// json 불러오기
app.use(express.json());

// env
const connection = process.env;

// cookieParser
app.use(cookieParser());


// db연결
sequelize.sync({ force: false }).then(() => {
    console.log(`Server connection on mysql`);
});

// 서버 연결
app.listen(connection.HOST_PORT, () => {
    console.log(`Server listening on port ${connection.HOST_PORT}`);
});

-------------------------------------------------------------------------------------------

"./.env" 파일-----------------------------------------------------------------------------


#port
HOST_PORT=포트번호입력
#db
DB_USER=DB_USER입력
DB_DATABASE=DB_DATABASE입력
DB_PASSWORD=DB_PASSWORD입력
#token
SECRETKEY=직접SECRETKEY입력

-------------------------------------------------------------------------------------------








============================================================================================//
############################ API 파일 코드 구현 및 작동 로직 정리 ###########################
//===========================================================================================
[[6]]. 회원 가입 API

    - 회원가입 Url 할당하여 만들기------------------------------------------------------------
        
        (1) => "./app.js" // --(회원가입 url 할당)--> middleware연결
                -------------------------------------------------------
                import authRoute from './routes/auth.js' // 삽입
                app.use('/', authRoute) // 해서 url('/') --(연결)--> authRoute

        (2) =>"./routes/auth.js" 파일 기본 완성하기
                -------------------------------------------------------
                import express from "express" -->ㄹ
                import * as authController from "../controller/auth.js" -->
                import { body } from "express-validator" -->
                import { validate } from "../middleware/validator.js" -->

                const router = express.Router() -->

                export default router --> router로 추출
                -------------------------------------------------------

        (3) => "./routes/auth.js(회원가입 url 할당)"(1) --> "../controller/auth.js"(2)
                router.post('/signup', validateCredential, authController.signup) 
                    '/signup' 경로로 들어오면 
                    1. validateCredential 거치기 // nickname, password 설정할때 유효성 
                    2. authController.signup 으로가기 // "../controller.auth.js"파일로 가서 회원가입 API 작동 =>>

==> -회원가입 API 만들기-----------------------------------------------------------------------

        [- 닉네임, 비밀번호, 비밀번호 확인을 **request**에서 전달받기]

        (4) => "./controller/auth.js(회원가입 signup)"
            const { nickname, password, confirm } = req.body로 가져오기
        
            [조건] [- 닉네임은 `최소 3자 이상, ]

                (5) => "./routes/auth.js(validateCredential(nickname))"(1) --> "../middleware/varidator.js"(2)
            
            [조건] [알파벳 대소문자(a~z, A~Z), 숫자(0~9)`로 구성하기 ]

                (6) => "./controller/auth.js(조건식)"

            [조건] [- 비밀번호는 `최소 4자 이상이며, ]

                (7) => "./routes/auth.js(validateCredential(password))"(1) --> "../middleware/varidator.js"(2)
                    회원가입 url 할당에 validateCredential 거치게 해 주기

            [조건] [닉네임과 같은 값이 포함된 경우 회원가입에 실패`로 만들기 ]

                (8) => "./controller/auth.js(패스워드에 닉네임과 같은값 포함하는지 확인 검증)"

            [조건] [- 비밀번호 확인은 비밀번호와 정확하게 일치하기]

                (9) => "./controller/auth.js(패스워드 2중 확인 검증)"

            [조건] [- 데이터베이스에 존재하는 닉네임을 입력한 채 회원가입 버튼을 누른 경우 "중복된 닉네임입니다." 라는 에러메세지를 **response**에 포함하기]
            
                (10) => "./controller/auth.js(닉네임 중복 확인)"

            [조건] [- 위의 조건들에 부합한다면 DB에 userId ,nickname ,password 생성하기]
            
                (11) => "./controller/auth.js(생성)"(1) --> "../data/auth.js"(2) (function createUser(users) 실행)
                    return User.create(users).then((data) => data.dataValues.userId) 로 저장
        
                [- 성공 메세지 response]
                
                    (12) => "./controller/auth.js(성공 메세지 res)"


#############################################################################################
//===========================================================================================
[[7]]. 로그인 API

    - 로그인 Url 할당하여 만들기--------------------------------------------------------------
    (13) => 이미 할당되어있는 '/'에 "./routes/auth.js" 파일에서 경로 생성
            router.post("/login", authController.login) 
                "/login" 경로로 들어오면 authController.login 실행


    - 로그인 API 만들기-----------------------------------------------------------------------

        [- 닉네임, 비밀번호를 **request**에서 전달받기]

            (14) => "./controller/auth.js(로그인 API)" 
                    const { nickname, password } = req.body로 가져오기

        [- 로그인 버튼을 누른 경우 닉네임과 비밀번호가 데이터베이스에 등록됐는지 찾은 뒤, ]

            (15) => "./controller/auth.js(로그인 API)"
        
        [하나라도 맞지 않는 정보가 있다면 "닉네임 또는 패스워드를 확인해주세요."라는 에러 메세지를 **response**에 포함하기]

            (16) => "./controller/auth.js(로그인 API)"
        
        [- 로그인 성공 시, 로그인에 성공한 유저의 정보를 JWT를 활용하여 클라이언트에게 Cookie로 전달하기]

            (17) => "./controller/auth.js(토큰생성기)" --> "./controller/auth.js(토큰처리)"



#############################################################################################
//=========================================================================================== (이해완료)
[[8]]. 게시글 API

    - 게식들 Url 할당하여 만들기
    (18) => "./app.js" // -- (게시글 url 할당) --> middleware연결
            ------------------------------------------------------
            import postRoute from './routes/post.js' // 삽입
            app.use('/post', postRoute) // 해서 url('/post') -- (연결) --> postRoute

    - 
    (19) =>"./routes/post.js" 파일 기본 완성하기
            ------------------------------------------------------
            import express from "express" //
            import * as postController from "../controller/posts.js" // post.js 컨트롤러 파일생성 
            import {isAuth} from "../middleware/auth.js" // auth.js 미들웨어 파일생성

            const router = express.Router() //

            export default router // router로 추출
            ------------------------------------------------------


==> 토큰 유효성 검사해주는 파일 만들기------------------------------------------------------- 

    (20) =>"./middleware/auth.js" 파일로 토큰 유효성 검사 미들웨어 만들기
            ------------------------------------------------------

    
==> 게시글 API 만들기------------------------------------------------------------------------ 
    () =>"./controller/posts.js" 파일로 API 만들기

        1. 게시글 작성 API

            - 토큰을 검사하여, 유효한 토큰일 경우에만 게시글 작성 가능
                () => 

            - 제목, 작성 내용을 입력하기
                () => 

        2. 전체 게시글 목록 조회 API

            - 제목, 작성자명(nickname), 작성 날짜를 조회하기
                () => 

            - 작성 날짜 기준으로 내림차순 정렬하기
                () => 

        3. 게시글 조회 API

            - 제목, 작성자명(nickname), 작성 날짜, 작성 내용을 조회하기 (검색 기능이 아닙니다. 간단한 게시글 조회만 구현해주세요.)
                () =>     
        
        4. 게시글 수정 API

            - 토큰을 검사하여, 해당 사용자가 작성한 게시글만 수정 가능
                () => 

        5. 게시글 삭제 API

            - 토큰을 검사하여, 해당 사용자가 작성한 게시글만 삭제 가능
                () => 
============================================================================================//   